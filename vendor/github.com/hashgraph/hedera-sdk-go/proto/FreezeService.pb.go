// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/FreezeService.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("proto/FreezeService.proto", fileDescriptor_064d972ec7992e3f)
}

var fileDescriptor_064d972ec7992e3f = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x77, 0x2b, 0x4a, 0x4d, 0xad, 0x4a, 0x0d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0x03, 0x8b, 0x09, 0xb1, 0x82, 0x29, 0x29, 0x79, 0x88, 0x8a, 0x90, 0xa2, 0xc4, 0xbc, 0xe2, 0xc4,
	0xe4, 0x92, 0xcc, 0xfc, 0xbc, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0x62, 0xa8, 0x3a, 0x29, 0x71,
	0x0c, 0x05, 0x10, 0x09, 0x23, 0x4f, 0x2e, 0x5e, 0x14, 0x73, 0x85, 0x2c, 0xb8, 0xd8, 0xd2, 0xc0,
	0x02, 0x42, 0x42, 0x10, 0x25, 0x7a, 0x48, 0x9a, 0xa4, 0xa4, 0x30, 0xc5, 0x60, 0x36, 0x39, 0xb9,
	0x71, 0x49, 0x25, 0xe7, 0xe7, 0xea, 0x65, 0xa4, 0xa6, 0xa4, 0x16, 0x25, 0xea, 0x65, 0x24, 0x16,
	0x67, 0xa4, 0x17, 0x25, 0x16, 0x64, 0x40, 0x74, 0x44, 0x69, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26,
	0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xc3, 0xe5, 0xf4, 0x21, 0x8a, 0x75, 0x8b, 0x53, 0xb2, 0x75, 0xd3,
	0xf3, 0xf5, 0xc1, 0x2a, 0x93, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x81, 0xbf,
	0x0f, 0xf3, 0xf7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FreezeServiceClient is the client API for FreezeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FreezeServiceClient interface {
	Freeze(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type freezeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreezeServiceClient(cc grpc.ClientConnInterface) FreezeServiceClient {
	return &freezeServiceClient{cc}
}

func (c *freezeServiceClient) Freeze(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.FreezeService/freeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreezeServiceServer is the server API for FreezeService service.
type FreezeServiceServer interface {
	Freeze(context.Context, *Transaction) (*TransactionResponse, error)
}

// UnimplementedFreezeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFreezeServiceServer struct {
}

func (*UnimplementedFreezeServiceServer) Freeze(ctx context.Context, req *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Freeze not implemented")
}

func RegisterFreezeServiceServer(s *grpc.Server, srv FreezeServiceServer) {
	s.RegisterService(&_FreezeService_serviceDesc, srv)
}

func _FreezeService_Freeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreezeServiceServer).Freeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FreezeService/Freeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreezeServiceServer).Freeze(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _FreezeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FreezeService",
	HandlerType: (*FreezeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "freeze",
			Handler:    _FreezeService_Freeze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/FreezeService.proto",
}

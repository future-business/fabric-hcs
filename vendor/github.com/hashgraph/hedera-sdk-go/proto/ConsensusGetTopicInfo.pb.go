// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/ConsensusGetTopicInfo.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// See [ConsensusService.getTopicInfo()](#proto.ConsensusService)
type ConsensusGetTopicInfoQuery struct {
	// Standard info sent from client to node, including the signed payment, and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header               *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TopicID              *TopicID     `protobuf:"bytes,2,opt,name=topicID,proto3" json:"topicID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConsensusGetTopicInfoQuery) Reset()         { *m = ConsensusGetTopicInfoQuery{} }
func (m *ConsensusGetTopicInfoQuery) String() string { return proto.CompactTextString(m) }
func (*ConsensusGetTopicInfoQuery) ProtoMessage()    {}
func (*ConsensusGetTopicInfoQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_de627f23df1ca429, []int{0}
}

func (m *ConsensusGetTopicInfoQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusGetTopicInfoQuery.Unmarshal(m, b)
}
func (m *ConsensusGetTopicInfoQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusGetTopicInfoQuery.Marshal(b, m, deterministic)
}
func (m *ConsensusGetTopicInfoQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusGetTopicInfoQuery.Merge(m, src)
}
func (m *ConsensusGetTopicInfoQuery) XXX_Size() int {
	return xxx_messageInfo_ConsensusGetTopicInfoQuery.Size(m)
}
func (m *ConsensusGetTopicInfoQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusGetTopicInfoQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusGetTopicInfoQuery proto.InternalMessageInfo

func (m *ConsensusGetTopicInfoQuery) GetHeader() *QueryHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ConsensusGetTopicInfoQuery) GetTopicID() *TopicID {
	if m != nil {
		return m.TopicID
	}
	return nil
}

// Retrieve the parameters of and state of a consensus topic.
type ConsensusGetTopicInfoResponse struct {
	// Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither.
	Header               *ResponseHeader           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TopicID              *TopicID                  `protobuf:"bytes,2,opt,name=topicID,proto3" json:"topicID,omitempty"`
	TopicDefinition      *ConsensusTopicDefinition `protobuf:"bytes,3,opt,name=topicDefinition,proto3" json:"topicDefinition,omitempty"` // Deprecated: Do not use.
	TopicState           *ConsensusTopicState      `protobuf:"bytes,4,opt,name=topicState,proto3" json:"topicState,omitempty"`           // Deprecated: Do not use.
	TopicInfo            *ConsensusTopicInfo       `protobuf:"bytes,5,opt,name=topicInfo,proto3" json:"topicInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ConsensusGetTopicInfoResponse) Reset()         { *m = ConsensusGetTopicInfoResponse{} }
func (m *ConsensusGetTopicInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ConsensusGetTopicInfoResponse) ProtoMessage()    {}
func (*ConsensusGetTopicInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de627f23df1ca429, []int{1}
}

func (m *ConsensusGetTopicInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusGetTopicInfoResponse.Unmarshal(m, b)
}
func (m *ConsensusGetTopicInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusGetTopicInfoResponse.Marshal(b, m, deterministic)
}
func (m *ConsensusGetTopicInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusGetTopicInfoResponse.Merge(m, src)
}
func (m *ConsensusGetTopicInfoResponse) XXX_Size() int {
	return xxx_messageInfo_ConsensusGetTopicInfoResponse.Size(m)
}
func (m *ConsensusGetTopicInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusGetTopicInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusGetTopicInfoResponse proto.InternalMessageInfo

func (m *ConsensusGetTopicInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ConsensusGetTopicInfoResponse) GetTopicID() *TopicID {
	if m != nil {
		return m.TopicID
	}
	return nil
}

// Deprecated: Do not use.
func (m *ConsensusGetTopicInfoResponse) GetTopicDefinition() *ConsensusTopicDefinition {
	if m != nil {
		return m.TopicDefinition
	}
	return nil
}

// Deprecated: Do not use.
func (m *ConsensusGetTopicInfoResponse) GetTopicState() *ConsensusTopicState {
	if m != nil {
		return m.TopicState
	}
	return nil
}

func (m *ConsensusGetTopicInfoResponse) GetTopicInfo() *ConsensusTopicInfo {
	if m != nil {
		return m.TopicInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsensusGetTopicInfoQuery)(nil), "proto.ConsensusGetTopicInfoQuery")
	proto.RegisterType((*ConsensusGetTopicInfoResponse)(nil), "proto.ConsensusGetTopicInfoResponse")
}

func init() {
	proto.RegisterFile("proto/ConsensusGetTopicInfo.proto", fileDescriptor_de627f23df1ca429)
}

var fileDescriptor_de627f23df1ca429 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0x33, 0x31,
	0x14, 0x85, 0x99, 0xfe, 0x7f, 0x2b, 0x46, 0x50, 0x08, 0xa8, 0x31, 0xa0, 0xd5, 0xe2, 0xa2, 0x08,
	0x9d, 0x01, 0x5d, 0xb8, 0x73, 0x51, 0x0b, 0xd6, 0x85, 0xa0, 0x63, 0x57, 0xee, 0xd2, 0x69, 0x3a,
	0x09, 0xd2, 0xc9, 0x90, 0x64, 0x16, 0x7d, 0x3b, 0x1f, 0x4d, 0xbc, 0xc9, 0xb4, 0x9d, 0x21, 0x2e,
	0x5c, 0x05, 0x72, 0xbe, 0x73, 0xee, 0xbd, 0x07, 0x5d, 0x95, 0x5a, 0x59, 0x95, 0x3c, 0xaa, 0xc2,
	0xf0, 0xc2, 0x54, 0xe6, 0x89, 0xdb, 0x99, 0x2a, 0x65, 0xf6, 0x5c, 0x2c, 0x55, 0x0c, 0x1a, 0xee,
	0xc2, 0x43, 0x4f, 0x1c, 0x39, 0x66, 0x46, 0x66, 0xb3, 0x75, 0xc9, 0x8d, 0x93, 0xe9, 0xa9, 0xfb,
	0x7f, 0xab, 0xb8, 0x5e, 0x4f, 0x39, 0x5b, 0x70, 0xed, 0x05, 0xea, 0x84, 0x94, 0x9b, 0xf2, 0x27,
	0xbd, 0xa1, 0x5d, 0xb7, 0xc6, 0xc2, 0xcc, 0x09, 0x5f, 0xca, 0x42, 0x5a, 0xa9, 0x0a, 0x4f, 0x5d,
	0x84, 0xa8, 0xed, 0x66, 0xb4, 0x1f, 0xd2, 0xdf, 0x2d, 0xb3, 0xdc, 0x01, 0x03, 0x8d, 0x68, 0xf0,
	0x32, 0x58, 0x16, 0xdf, 0xa0, 0x9e, 0x80, 0xa5, 0x48, 0x74, 0x19, 0x0d, 0x0f, 0x6e, 0xb1, 0x73,
	0xc5, 0x3b, 0xa7, 0xa4, 0x9e, 0xc0, 0x43, 0xb4, 0x67, 0xc1, 0x3d, 0x21, 0x1d, 0x80, 0x0f, 0x3d,
	0xec, 0x32, 0x27, 0x69, 0x2d, 0x0f, 0xbe, 0x3a, 0xe8, 0x3c, 0x38, 0xb4, 0x2e, 0x02, 0x8f, 0x5a,
	0x73, 0x8f, 0x7d, 0x54, 0xb3, 0xa9, 0xbf, 0x8f, 0xc6, 0x2f, 0xe8, 0xc8, 0x36, 0x8b, 0x24, 0xff,
	0xc0, 0xd1, 0xf7, 0x8e, 0xdf, 0xfa, 0x1e, 0x77, 0x48, 0x94, 0xb6, 0xbd, 0xf8, 0x01, 0x21, 0xbb,
	0x69, 0x94, 0xfc, 0x87, 0x24, 0x1a, 0x4c, 0x02, 0x02, 0x42, 0x76, 0x1c, 0xf8, 0x1e, 0xed, 0xdb,
	0xfa, 0x78, 0xd2, 0x05, 0xfb, 0x59, 0xd0, 0x0e, 0xed, 0x6c, 0xd9, 0xf1, 0x14, 0xd1, 0x4c, 0xad,
	0x62, 0xc1, 0x17, 0x5c, 0xb3, 0x58, 0x30, 0x23, 0x72, 0xcd, 0x4a, 0xe1, 0xbc, 0xaf, 0xd1, 0xc7,
	0x30, 0x97, 0x56, 0x54, 0xf3, 0x38, 0x53, 0xab, 0x64, 0xa3, 0x26, 0x0e, 0x1f, 0x99, 0xc5, 0xe7,
	0x28, 0x57, 0x09, 0xb0, 0xf3, 0x1e, 0x3c, 0x77, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x02,
	0x17, 0xcd, 0xe7, 0x02, 0x00, 0x00,
}

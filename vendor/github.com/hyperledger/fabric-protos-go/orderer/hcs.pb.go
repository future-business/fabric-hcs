// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer/hcs.proto

package orderer

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HcsMessageRegular_Class int32

const (
	HcsMessageRegular_NORMAL HcsMessageRegular_Class = 0
	HcsMessageRegular_CONFIG HcsMessageRegular_Class = 1
)

var HcsMessageRegular_Class_name = map[int32]string{
	0: "NORMAL",
	1: "CONFIG",
}

var HcsMessageRegular_Class_value = map[string]int32{
	"NORMAL": 0,
	"CONFIG": 1,
}

func (x HcsMessageRegular_Class) String() string {
	return proto.EnumName(HcsMessageRegular_Class_name, int32(x))
}

func (HcsMessageRegular_Class) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d490350899af2cbc, []int{1, 0}
}

// HcsMessage is a wrapper type for the messages that the HCS-based
// orderer deals with.
type HcsMessage struct {
	// Types that are valid to be assigned to Type:
	//	*HcsMessage_Regular
	//	*HcsMessage_TimeToCut
	Type                 isHcsMessage_Type `protobuf_oneof:"Type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HcsMessage) Reset()         { *m = HcsMessage{} }
func (m *HcsMessage) String() string { return proto.CompactTextString(m) }
func (*HcsMessage) ProtoMessage()    {}
func (*HcsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d490350899af2cbc, []int{0}
}

func (m *HcsMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HcsMessage.Unmarshal(m, b)
}
func (m *HcsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HcsMessage.Marshal(b, m, deterministic)
}
func (m *HcsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HcsMessage.Merge(m, src)
}
func (m *HcsMessage) XXX_Size() int {
	return xxx_messageInfo_HcsMessage.Size(m)
}
func (m *HcsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HcsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HcsMessage proto.InternalMessageInfo

type isHcsMessage_Type interface {
	isHcsMessage_Type()
}

type HcsMessage_Regular struct {
	Regular *HcsMessageRegular `protobuf:"bytes,1,opt,name=regular,proto3,oneof"`
}

type HcsMessage_TimeToCut struct {
	TimeToCut *HcsMessageTimeToCut `protobuf:"bytes,2,opt,name=time_to_cut,json=timeToCut,proto3,oneof"`
}

func (*HcsMessage_Regular) isHcsMessage_Type() {}

func (*HcsMessage_TimeToCut) isHcsMessage_Type() {}

func (m *HcsMessage) GetType() isHcsMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *HcsMessage) GetRegular() *HcsMessageRegular {
	if x, ok := m.GetType().(*HcsMessage_Regular); ok {
		return x.Regular
	}
	return nil
}

func (m *HcsMessage) GetTimeToCut() *HcsMessageTimeToCut {
	if x, ok := m.GetType().(*HcsMessage_TimeToCut); ok {
		return x.TimeToCut
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HcsMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HcsMessage_Regular)(nil),
		(*HcsMessage_TimeToCut)(nil),
	}
}

// HcsMessageRegular wraps a marshalled envelope.
type HcsMessageRegular struct {
	Payload              []byte                  `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	ConfigSeq            uint64                  `protobuf:"varint,2,opt,name=config_seq,json=configSeq,proto3" json:"config_seq,omitempty"`
	Class                HcsMessageRegular_Class `protobuf:"varint,3,opt,name=class,proto3,enum=orderer.HcsMessageRegular_Class" json:"class,omitempty"`
	OriginalSeq          uint64                  `protobuf:"varint,4,opt,name=original_seq,json=originalSeq,proto3" json:"original_seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HcsMessageRegular) Reset()         { *m = HcsMessageRegular{} }
func (m *HcsMessageRegular) String() string { return proto.CompactTextString(m) }
func (*HcsMessageRegular) ProtoMessage()    {}
func (*HcsMessageRegular) Descriptor() ([]byte, []int) {
	return fileDescriptor_d490350899af2cbc, []int{1}
}

func (m *HcsMessageRegular) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HcsMessageRegular.Unmarshal(m, b)
}
func (m *HcsMessageRegular) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HcsMessageRegular.Marshal(b, m, deterministic)
}
func (m *HcsMessageRegular) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HcsMessageRegular.Merge(m, src)
}
func (m *HcsMessageRegular) XXX_Size() int {
	return xxx_messageInfo_HcsMessageRegular.Size(m)
}
func (m *HcsMessageRegular) XXX_DiscardUnknown() {
	xxx_messageInfo_HcsMessageRegular.DiscardUnknown(m)
}

var xxx_messageInfo_HcsMessageRegular proto.InternalMessageInfo

func (m *HcsMessageRegular) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HcsMessageRegular) GetConfigSeq() uint64 {
	if m != nil {
		return m.ConfigSeq
	}
	return 0
}

func (m *HcsMessageRegular) GetClass() HcsMessageRegular_Class {
	if m != nil {
		return m.Class
	}
	return HcsMessageRegular_NORMAL
}

func (m *HcsMessageRegular) GetOriginalSeq() uint64 {
	if m != nil {
		return m.OriginalSeq
	}
	return 0
}

// TODO: a fragment key is needed to identify the subject so as to handle
// the case that different messages are fragmented by different subjects with
// the same fragment_id
type HcsMessageFragment struct {
	Fragment             []byte   `protobuf:"bytes,1,opt,name=fragment,proto3" json:"fragment,omitempty"`
	FragmentKey          string   `protobuf:"bytes,2,opt,name=fragment_key,json=fragmentKey,proto3" json:"fragment_key,omitempty"`
	FragmentId           uint64   `protobuf:"fixed64,3,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty"`
	Sequence             uint32   `protobuf:"fixed32,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	TotalFragments       uint32   `protobuf:"fixed32,5,opt,name=total_fragments,json=totalFragments,proto3" json:"total_fragments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HcsMessageFragment) Reset()         { *m = HcsMessageFragment{} }
func (m *HcsMessageFragment) String() string { return proto.CompactTextString(m) }
func (*HcsMessageFragment) ProtoMessage()    {}
func (*HcsMessageFragment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d490350899af2cbc, []int{2}
}

func (m *HcsMessageFragment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HcsMessageFragment.Unmarshal(m, b)
}
func (m *HcsMessageFragment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HcsMessageFragment.Marshal(b, m, deterministic)
}
func (m *HcsMessageFragment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HcsMessageFragment.Merge(m, src)
}
func (m *HcsMessageFragment) XXX_Size() int {
	return xxx_messageInfo_HcsMessageFragment.Size(m)
}
func (m *HcsMessageFragment) XXX_DiscardUnknown() {
	xxx_messageInfo_HcsMessageFragment.DiscardUnknown(m)
}

var xxx_messageInfo_HcsMessageFragment proto.InternalMessageInfo

func (m *HcsMessageFragment) GetFragment() []byte {
	if m != nil {
		return m.Fragment
	}
	return nil
}

func (m *HcsMessageFragment) GetFragmentKey() string {
	if m != nil {
		return m.FragmentKey
	}
	return ""
}

func (m *HcsMessageFragment) GetFragmentId() uint64 {
	if m != nil {
		return m.FragmentId
	}
	return 0
}

func (m *HcsMessageFragment) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *HcsMessageFragment) GetTotalFragments() uint32 {
	if m != nil {
		return m.TotalFragments
	}
	return 0
}

// HcsMessageTimeToCut is used to signal to the orderers that it is time to
// cut block <block_number>.
type HcsMessageTimeToCut struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HcsMessageTimeToCut) Reset()         { *m = HcsMessageTimeToCut{} }
func (m *HcsMessageTimeToCut) String() string { return proto.CompactTextString(m) }
func (*HcsMessageTimeToCut) ProtoMessage()    {}
func (*HcsMessageTimeToCut) Descriptor() ([]byte, []int) {
	return fileDescriptor_d490350899af2cbc, []int{3}
}

func (m *HcsMessageTimeToCut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HcsMessageTimeToCut.Unmarshal(m, b)
}
func (m *HcsMessageTimeToCut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HcsMessageTimeToCut.Marshal(b, m, deterministic)
}
func (m *HcsMessageTimeToCut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HcsMessageTimeToCut.Merge(m, src)
}
func (m *HcsMessageTimeToCut) XXX_Size() int {
	return xxx_messageInfo_HcsMessageTimeToCut.Size(m)
}
func (m *HcsMessageTimeToCut) XXX_DiscardUnknown() {
	xxx_messageInfo_HcsMessageTimeToCut.DiscardUnknown(m)
}

var xxx_messageInfo_HcsMessageTimeToCut proto.InternalMessageInfo

func (m *HcsMessageTimeToCut) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

// HcsMetadata is encoded into the ORDERER block to keep track of HCS-related
// metadata associated with this block.
type HcsMetadata struct {
	// lastTimestampPersisted is the used to keep track of the timestamp of
	// the last ordered message in the last block so when an HCS-based orderer
	// boots up, it knows from when to retrieve ordererd messages
	LastConsensusTimestampPersisted *timestamp.Timestamp `protobuf:"bytes,1,opt,name=last_consensus_timestamp_persisted,json=lastConsensusTimestampPersisted,proto3" json:"last_consensus_timestamp_persisted,omitempty"`
	LastOriginalSequenceProcessed   uint64               `protobuf:"varint,2,opt,name=last_original_sequence_processed,json=lastOriginalSequenceProcessed,proto3" json:"last_original_sequence_processed,omitempty"`
	LastResubmittedConfigSequence   uint64               `protobuf:"varint,3,opt,name=last_resubmitted_config_sequence,json=lastResubmittedConfigSequence,proto3" json:"last_resubmitted_config_sequence,omitempty"`
	// last fragment free block number is the last block number at which there is
	// no fragments pending reassembly
	LastFragmentFreeBlockNumber uint64   `protobuf:"varint,4,opt,name=last_fragment_free_block_number,json=lastFragmentFreeBlockNumber,proto3" json:"last_fragment_free_block_number,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *HcsMetadata) Reset()         { *m = HcsMetadata{} }
func (m *HcsMetadata) String() string { return proto.CompactTextString(m) }
func (*HcsMetadata) ProtoMessage()    {}
func (*HcsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d490350899af2cbc, []int{4}
}

func (m *HcsMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HcsMetadata.Unmarshal(m, b)
}
func (m *HcsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HcsMetadata.Marshal(b, m, deterministic)
}
func (m *HcsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HcsMetadata.Merge(m, src)
}
func (m *HcsMetadata) XXX_Size() int {
	return xxx_messageInfo_HcsMetadata.Size(m)
}
func (m *HcsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_HcsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_HcsMetadata proto.InternalMessageInfo

func (m *HcsMetadata) GetLastConsensusTimestampPersisted() *timestamp.Timestamp {
	if m != nil {
		return m.LastConsensusTimestampPersisted
	}
	return nil
}

func (m *HcsMetadata) GetLastOriginalSequenceProcessed() uint64 {
	if m != nil {
		return m.LastOriginalSequenceProcessed
	}
	return 0
}

func (m *HcsMetadata) GetLastResubmittedConfigSequence() uint64 {
	if m != nil {
		return m.LastResubmittedConfigSequence
	}
	return 0
}

func (m *HcsMetadata) GetLastFragmentFreeBlockNumber() uint64 {
	if m != nil {
		return m.LastFragmentFreeBlockNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("orderer.HcsMessageRegular_Class", HcsMessageRegular_Class_name, HcsMessageRegular_Class_value)
	proto.RegisterType((*HcsMessage)(nil), "orderer.HcsMessage")
	proto.RegisterType((*HcsMessageRegular)(nil), "orderer.HcsMessageRegular")
	proto.RegisterType((*HcsMessageFragment)(nil), "orderer.HcsMessageFragment")
	proto.RegisterType((*HcsMessageTimeToCut)(nil), "orderer.HcsMessageTimeToCut")
	proto.RegisterType((*HcsMetadata)(nil), "orderer.HcsMetadata")
}

func init() { proto.RegisterFile("orderer/hcs.proto", fileDescriptor_d490350899af2cbc) }

var fileDescriptor_d490350899af2cbc = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4b, 0x6e, 0xdb, 0x3c,
	0x14, 0x85, 0xa3, 0xc4, 0xb1, 0xff, 0x5c, 0x07, 0xf9, 0x13, 0x76, 0x62, 0xa4, 0x0d, 0xec, 0x0a,
	0x28, 0x9a, 0x49, 0x24, 0x20, 0x05, 0x82, 0x8e, 0x0a, 0x34, 0x2e, 0xf2, 0x40, 0x9b, 0x07, 0x18,
	0x0f, 0x8a, 0x4e, 0x08, 0x4a, 0xba, 0x96, 0x85, 0x48, 0xa2, 0x4c, 0x52, 0x03, 0xef, 0xa1, 0x1b,
	0xea, 0x0e, 0x3a, 0xea, 0x9a, 0x0a, 0x91, 0xa6, 0x94, 0xa2, 0xe9, 0x8c, 0x3c, 0xf8, 0x78, 0xee,
	0x83, 0x07, 0x0e, 0x84, 0x4c, 0x50, 0xa2, 0x0c, 0x17, 0xb1, 0x0a, 0x2a, 0x29, 0xb4, 0x20, 0x83,
	0xb5, 0x74, 0x38, 0x4e, 0x85, 0x48, 0x73, 0x0c, 0x8d, 0x1c, 0xd5, 0xf3, 0x50, 0x67, 0x05, 0x2a,
	0xcd, 0x8b, 0xca, 0x92, 0xfe, 0x77, 0x0f, 0xe0, 0x2a, 0x56, 0x37, 0xa8, 0x14, 0x4f, 0x91, 0x9c,
	0xc1, 0x40, 0x62, 0x5a, 0xe7, 0x5c, 0x8e, 0xbc, 0x89, 0x77, 0x3c, 0x3c, 0x3d, 0x0c, 0xd6, 0x56,
	0x41, 0x47, 0x51, 0x4b, 0x5c, 0x6d, 0x50, 0x07, 0x93, 0x0f, 0x30, 0x6c, 0x9c, 0x99, 0x16, 0x2c,
	0xae, 0xf5, 0x68, 0xd3, 0xbc, 0x7d, 0xf5, 0xcc, 0xdb, 0x59, 0x56, 0xe0, 0x4c, 0x4c, 0x6b, 0x7d,
	0xb5, 0x41, 0x77, 0xb4, 0xbb, 0x9c, 0xf7, 0xa1, 0x37, 0x5b, 0x55, 0xe8, 0xff, 0xf4, 0xe0, 0xe0,
	0xaf, 0x42, 0x64, 0x04, 0x83, 0x8a, 0xaf, 0x72, 0xc1, 0x13, 0xd3, 0xd5, 0x2e, 0x75, 0x57, 0x72,
	0x04, 0x10, 0x8b, 0x72, 0x9e, 0xa5, 0x4c, 0xe1, 0xd2, 0x94, 0xed, 0xd1, 0x1d, 0xab, 0x3c, 0xe0,
	0x92, 0x9c, 0xc1, 0x76, 0x9c, 0x73, 0xa5, 0x46, 0x5b, 0x13, 0xef, 0x78, 0xef, 0x74, 0xf2, 0xef,
	0x61, 0x82, 0x69, 0xc3, 0x51, 0x8b, 0x93, 0xd7, 0xb0, 0x2b, 0x64, 0x96, 0x66, 0x25, 0xcf, 0x8d,
	0x71, 0xcf, 0x18, 0x0f, 0x9d, 0xf6, 0x80, 0x4b, 0x7f, 0x0c, 0xdb, 0xe6, 0x09, 0x01, 0xe8, 0xdf,
	0xde, 0xd1, 0x9b, 0x8f, 0x5f, 0xf6, 0x37, 0x9a, 0xf3, 0xf4, 0xee, 0xf6, 0xe2, 0xfa, 0x72, 0xdf,
	0xf3, 0x7f, 0x78, 0x40, 0xba, 0x32, 0x17, 0x92, 0xa7, 0x05, 0x96, 0x9a, 0x1c, 0xc2, 0x7f, 0xf3,
	0xf5, 0x79, 0x3d, 0x4c, 0x7b, 0x6f, 0xca, 0xba, 0x33, 0x7b, 0xc4, 0x95, 0x99, 0x67, 0x87, 0x0e,
	0x9d, 0xf6, 0x19, 0x57, 0x64, 0x0c, 0xed, 0x95, 0x65, 0x89, 0x99, 0xab, 0x4f, 0xc1, 0x49, 0xd7,
	0x49, 0xe3, 0xaf, 0x70, 0x59, 0x63, 0x19, 0xa3, 0x69, 0x7b, 0x40, 0xdb, 0x3b, 0x79, 0x0b, 0xff,
	0x6b, 0xa1, 0x79, 0xce, 0x1c, 0xaf, 0x46, 0xdb, 0x06, 0xd9, 0x33, 0xb2, 0xeb, 0x51, 0xf9, 0xef,
	0xe1, 0xc5, 0x33, 0x5f, 0xd6, 0xf4, 0x17, 0xe5, 0x22, 0x7e, 0x64, 0x65, 0x5d, 0x44, 0x68, 0x23,
	0xd2, 0xa3, 0x43, 0xa3, 0xdd, 0x1a, 0xc9, 0xff, 0xb5, 0x09, 0x43, 0xf3, 0x54, 0xf3, 0x84, 0x6b,
	0x4e, 0x52, 0xf0, 0x73, 0xae, 0x34, 0x8b, 0x45, 0xa9, 0xb0, 0x54, 0xb5, 0x62, 0x6d, 0x02, 0x59,
	0x85, 0x52, 0x65, 0x4a, 0x63, 0xd2, 0x66, 0xcd, 0xa6, 0x35, 0x70, 0x69, 0x0d, 0x66, 0x8e, 0xa5,
	0xe3, 0xc6, 0x65, 0xea, 0x4c, 0x5a, 0xfd, 0xde, 0x59, 0x90, 0x4b, 0x98, 0x98, 0x42, 0x4f, 0xff,
	0xcd, 0x4c, 0xcd, 0x2a, 0x29, 0x62, 0x54, 0x0a, 0x93, 0x75, 0x3e, 0x8e, 0x1a, 0xee, 0xae, 0xfb,
	0x4a, 0x43, 0xdd, 0x3b, 0xa8, 0x35, 0x92, 0xa8, 0xea, 0xa8, 0xc8, 0xb4, 0xc6, 0x84, 0x75, 0x19,
	0xb3, 0x8b, 0xdd, 0xea, 0x8c, 0x68, 0x87, 0x4d, 0x5d, 0xee, 0xec, 0xb6, 0x3f, 0x81, 0x69, 0xba,
	0x5d, 0x36, 0x9b, 0x4b, 0x44, 0xf6, 0xc7, 0x02, 0x6d, 0xae, 0x5e, 0x36, 0x98, 0x5b, 0xfe, 0x85,
	0x44, 0x3c, 0xef, 0x16, 0x7a, 0xfe, 0x15, 0xde, 0x08, 0x99, 0x06, 0x8b, 0x55, 0x85, 0x32, 0xc7,
	0x24, 0x45, 0x19, 0xcc, 0x79, 0x24, 0xb3, 0xd8, 0x6e, 0x49, 0xb9, 0x48, 0x7f, 0x0b, 0xd3, 0x4c,
	0x2f, 0xea, 0x28, 0x88, 0x45, 0x11, 0x3e, 0xa1, 0x43, 0x4b, 0x9f, 0x58, 0xfa, 0x24, 0x15, 0xe1,
	0xfa, 0x41, 0xd4, 0x37, 0xd2, 0xbb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x06, 0xf4, 0x87,
	0x40, 0x04, 0x00, 0x00,
}

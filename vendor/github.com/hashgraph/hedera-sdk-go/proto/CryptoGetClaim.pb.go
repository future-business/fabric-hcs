// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/CryptoGetClaim.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Get a single claim attached to an account, or return null if it does not exist.
type CryptoGetClaimQuery struct {
	Header               *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AccountID            *AccountID   `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Hash                 []byte       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CryptoGetClaimQuery) Reset()         { *m = CryptoGetClaimQuery{} }
func (m *CryptoGetClaimQuery) String() string { return proto.CompactTextString(m) }
func (*CryptoGetClaimQuery) ProtoMessage()    {}
func (*CryptoGetClaimQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16a287d53529ac5, []int{0}
}

func (m *CryptoGetClaimQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoGetClaimQuery.Unmarshal(m, b)
}
func (m *CryptoGetClaimQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoGetClaimQuery.Marshal(b, m, deterministic)
}
func (m *CryptoGetClaimQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoGetClaimQuery.Merge(m, src)
}
func (m *CryptoGetClaimQuery) XXX_Size() int {
	return xxx_messageInfo_CryptoGetClaimQuery.Size(m)
}
func (m *CryptoGetClaimQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoGetClaimQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoGetClaimQuery proto.InternalMessageInfo

func (m *CryptoGetClaimQuery) GetHeader() *QueryHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CryptoGetClaimQuery) GetAccountID() *AccountID {
	if m != nil {
		return m.AccountID
	}
	return nil
}

func (m *CryptoGetClaimQuery) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// Response when the client sends the node CryptoGetClaimQuery. If the claim exists, there can be a state proof for that single claim. If the claim doesn't exist, then the state proof must be obtained for the account as a whole, which lists all the attached claims, which then proves that any claim not on the list must not exist.
type CryptoGetClaimResponse struct {
	Header               *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Claim                *Claim          `protobuf:"bytes,2,opt,name=claim,proto3" json:"claim,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CryptoGetClaimResponse) Reset()         { *m = CryptoGetClaimResponse{} }
func (m *CryptoGetClaimResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoGetClaimResponse) ProtoMessage()    {}
func (*CryptoGetClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16a287d53529ac5, []int{1}
}

func (m *CryptoGetClaimResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoGetClaimResponse.Unmarshal(m, b)
}
func (m *CryptoGetClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoGetClaimResponse.Marshal(b, m, deterministic)
}
func (m *CryptoGetClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoGetClaimResponse.Merge(m, src)
}
func (m *CryptoGetClaimResponse) XXX_Size() int {
	return xxx_messageInfo_CryptoGetClaimResponse.Size(m)
}
func (m *CryptoGetClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoGetClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoGetClaimResponse proto.InternalMessageInfo

func (m *CryptoGetClaimResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CryptoGetClaimResponse) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func init() {
	proto.RegisterType((*CryptoGetClaimQuery)(nil), "proto.CryptoGetClaimQuery")
	proto.RegisterType((*CryptoGetClaimResponse)(nil), "proto.CryptoGetClaimResponse")
}

func init() {
	proto.RegisterFile("proto/CryptoGetClaim.proto", fileDescriptor_d16a287d53529ac5)
}

var fileDescriptor_d16a287d53529ac5 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x89, 0xba, 0x81, 0x71, 0x07, 0x89, 0x38, 0x4b, 0x4f, 0xa3, 0xa7, 0x22, 0x34, 0x05,
	0xfd, 0x0b, 0xb6, 0x09, 0xce, 0x9b, 0x16, 0x4f, 0xde, 0xb2, 0x24, 0x34, 0x65, 0x76, 0x09, 0x49,
	0x7a, 0xe8, 0x1f, 0xe0, 0xff, 0x2d, 0xcb, 0xcb, 0x66, 0x2b, 0x3b, 0xbd, 0xf0, 0xbe, 0x5f, 0xbe,
	0xef, 0x7b, 0x38, 0x35, 0x56, 0x7b, 0x5d, 0xae, 0x6d, 0x6f, 0xbc, 0x7e, 0x95, 0x7e, 0xfd, 0xcd,
	0x9a, 0x96, 0x86, 0x25, 0x99, 0x84, 0x91, 0xce, 0x01, 0x59, 0x31, 0xd7, 0xf0, 0xcf, 0xde, 0x48,
	0x07, 0x72, 0xfa, 0x00, 0xfb, 0x8f, 0x4e, 0xda, 0x7e, 0x23, 0x99, 0x90, 0x36, 0x0a, 0xd1, 0xb3,
	0x92, 0xce, 0xe8, 0xbd, 0x93, 0xe7, 0x34, 0xc8, 0x5b, 0x0a, 0x31, 0xc8, 0xcb, 0x7e, 0x10, 0xbe,
	0x1b, 0x17, 0x09, 0xde, 0xe4, 0x11, 0x4f, 0x55, 0xf0, 0x48, 0xd0, 0x02, 0xe5, 0x37, 0x4f, 0x04,
	0x78, 0x3a, 0x48, 0xae, 0x22, 0x41, 0x28, 0xbe, 0x66, 0x9c, 0xeb, 0x6e, 0xef, 0xdf, 0x5e, 0x92,
	0x8b, 0x80, 0xdf, 0x46, 0x7c, 0x79, 0xdc, 0x57, 0x7f, 0x08, 0x21, 0xf8, 0x4a, 0x31, 0xa7, 0x92,
	0xcb, 0x05, 0xca, 0x67, 0x55, 0x78, 0x67, 0x3b, 0x3c, 0x1f, 0xd7, 0x38, 0x5e, 0x42, 0x8a, 0x7f,
	0x4d, 0xee, 0xa3, 0xf5, 0xf8, 0xd4, 0x53, 0x99, 0x0c, 0x4f, 0xf8, 0xe1, 0x7f, 0x2c, 0x32, 0x8b,
	0x34, 0x78, 0x82, 0xb4, 0xda, 0xe0, 0x94, 0xeb, 0x96, 0x2a, 0x29, 0xa4, 0x65, 0xf4, 0x90, 0x5f,
	0x5b, 0x66, 0x14, 0xa0, 0xef, 0xe8, 0x2b, 0xaf, 0x1b, 0xaf, 0xba, 0x2d, 0xe5, 0xba, 0x2d, 0x4f,
	0x6a, 0x09, 0x78, 0xe1, 0xc4, 0xae, 0xa8, 0x75, 0x19, 0xd8, 0xed, 0x34, 0x8c, 0xe7, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4f, 0xd7, 0x28, 0x93, 0xd3, 0x01, 0x00, 0x00,
}
